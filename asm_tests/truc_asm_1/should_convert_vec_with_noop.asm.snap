.section .text.should_convert_vec_with_noop,"ax",@progbits
	.globl	should_convert_vec_with_noop
	.p2align	4
.type	should_convert_vec_with_noop,@function
should_convert_vec_with_noop:
	.cfi_startproc
	.cfi_personality 155, DW.ref.rust_eh_personality
	.cfi_lsda 27, .Lexception1
	push rbp
	.cfi_def_cfa_offset 16
	push r15
	.cfi_def_cfa_offset 24
	push r14
	.cfi_def_cfa_offset 32
	push r13
	.cfi_def_cfa_offset 40
	push r12
	.cfi_def_cfa_offset 48
	push rbx
	.cfi_def_cfa_offset 56
	sub rsp, 136
	.cfi_def_cfa_offset 192
	.cfi_offset rbx, -56
	.cfi_offset r12, -48
	.cfi_offset r13, -40
	.cfi_offset r14, -32
	.cfi_offset r15, -24
	.cfi_offset rbp, -16
	mov rcx, qword ptr [rsi]
	mov r14, qword ptr [rsi + 8]
	mov rbx, qword ptr [rsi + 16]
	test rbx, rbx
	je .LBB9_12
	mov qword ptr [rsp + 8], 1
	cmp rbx, 1
	je .LBB9_12
	lea r8, [rbx - 2]
	cmp rbx, r8
	mov rax, r8
	cmovb rax, rbx
	lea rsi, [rax + 1]
	mov edx, 1
	cmp rsi, 23
	jb .LBB9_9
	lea r10, [rsp + 24]
	lea r11, [r14 + 8]
	cmp rbx, r8
	cmovb r8, rbx
	lea r15, [r14 + 8*r8]
	add r15, 16
	lea r9, [rsp + 16]
	lea r8, [rsp + 16]
	cmp r8, r15
	setb bpl
	cmp r11, r10
	setb r13b
	cmp r8, r9
	setb r8b
	lea r12, [rsp + 8]
	cmp r12, r10
	setb r10b
	cmp r11, r9
	setb r9b
	cmp r12, r15
	setb r11b
	test bpl, r13b
	jne .LBB9_9
	and r8b, r10b
	jne .LBB9_9
	and r9b, r11b
	jne .LBB9_9
	mov edx, esi
	and edx, 3
	mov r8d, 4
	cmovne r8, rdx
	sub rsi, r8
	mov rdx, rsi
	inc rdx
	mov rsi, rax
	not rsi
	add rsi, r8
	mov r8d, 1
	.p2align	4
.LBB9_7:
	lea r9, [rsi + r8]
	add r9, 4
	add r8, 4
	cmp r9, 1
	jne .LBB9_7
	mov qword ptr [rsp + 16], r8
	mov qword ptr [rsp + 8], r8
.LBB9_9:
	lea rsi, [rbx + 1]
	.p2align	4
.LBB9_10:
	mov r9, qword ptr [r14 + 8*rdx]
	lea r8, [rdx + 1]
	mov qword ptr [rsp + 16], r8
	cmp rsi, rdx
	je .LBB9_14
	mov qword ptr [r14 + 8*rdx], r9
	mov qword ptr [rsp + 8], r8
	mov rdx, r8
	cmp rbx, r8
	jne .LBB9_10
.LBB9_12:
	mov rax, rcx
	neg rax
	jo .LBB9_13
	mov qword ptr [rdi], rcx
	mov qword ptr [rdi + 8], r14
	mov qword ptr [rdi + 16], rbx
	mov rax, rdi
	add rsp, 136
	.cfi_def_cfa_offset 56
	pop rbx
	.cfi_def_cfa_offset 48
	pop r12
	.cfi_def_cfa_offset 40
	pop r13
	.cfi_def_cfa_offset 32
	pop r14
	.cfi_def_cfa_offset 24
	pop r15
	.cfi_def_cfa_offset 16
	pop rbp
	.cfi_def_cfa_offset 8
	ret
.LBB9_13:
	.cfi_def_cfa_offset 192
	lea rdi, [rip + .Lanon.76cbd883a681362e3f5caef3c5c31b76.12]
	lea rcx, [rip + .Lanon.76cbd883a681362e3f5caef3c5c31b76.11]
	lea r8, [rip + .Lanon.76cbd883a681362e3f5caef3c5c31b76.1]
	lea rdx, [rsp + 88]
	mov esi, 43
	call qword ptr [rip + core::result::unwrap_failed@GOTPCREL]
.LBB9_14:
	lea rdx, [rip + .Lanon.76cbd883a681362e3f5caef3c5c31b76.6]
	mov rdi, rax
	mov rsi, rbx
	call qword ptr [rip + core::panicking::panic_bounds_check@GOTPCREL]
	jmp .LBB9_15
	mov rdi, rax
	call qword ptr [rip + std::panicking::try::cleanup@GOTPCREL]
	mov qword ptr [rsp + 56], r14
	mov qword ptr [rsp + 64], rbx
	lea rcx, [rsp + 8]
	mov qword ptr [rsp + 72], rcx
	lea rcx, [rsp + 16]
	mov qword ptr [rsp + 80], rcx
	mov qword ptr [rsp + 24], rax
	mov qword ptr [rsp + 32], rdx
	lea rdi, [rsp + 56]
	call truc_runtime::convert::try_convert_vec_in_place::{{closure}}
	lea rax, [rsp + 24]
	mov qword ptr [rsp + 40], rax
	lea rax, [rip + <alloc::boxed::Box<T,A> as core::fmt::Debug>::fmt]
	mov qword ptr [rsp + 48], rax
	lea rax, [rip + .Lanon.76cbd883a681362e3f5caef3c5c31b76.2]
	mov qword ptr [rsp + 88], rax
	mov qword ptr [rsp + 96], 1
	mov qword ptr [rsp + 120], 0
	lea rax, [rsp + 40]
	mov qword ptr [rsp + 104], rax
	mov qword ptr [rsp + 112], 1
	lea rsi, [rip + .Lanon.76cbd883a681362e3f5caef3c5c31b76.3]
	lea rdi, [rsp + 88]
	call qword ptr [rip + core::panicking::panic_fmt@GOTPCREL]
.LBB9_15:
	ud2
	mov rbx, rax
	mov rdi, qword ptr [rsp + 24]
	mov rsi, qword ptr [rsp + 32]
	call core::ptr::drop_in_place<alloc::boxed::Box<dyn core::any::Any+core::marker::Send>>
	mov rdi, rbx
	call _Unwind_Resume@PLT
	call qword ptr [rip + core::panicking::panic_in_cleanup@GOTPCREL]
	call qword ptr [rip + core::panicking::panic_cannot_unwind@GOTPCREL]
